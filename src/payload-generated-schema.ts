/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  varchar,
  boolean,
  jsonb,
  serial,
  timestamp,
  numeric,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_pages_blocks_text_link_link_type = pgEnum(
  'enum_pages_blocks_text_link_link_type',
  ['pages', 'custom'],
)
export const enum_pages_blocks_form_form_type = pgEnum('enum_pages_blocks_form_form_type', [
  'download',
  'register',
])
export const enum_pages_blocks_home_hero_link_link_type = pgEnum(
  'enum_pages_blocks_home_hero_link_link_type',
  ['pages', 'custom'],
)
export const enum_pages_blocks_three_steps_link_link_type = pgEnum(
  'enum_pages_blocks_three_steps_link_link_type',
  ['pages', 'custom'],
)
export const enum_pages_blocks_get_to_know_link_link_type = pgEnum(
  'enum_pages_blocks_get_to_know_link_link_type',
  ['pages', 'custom'],
)
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_blocks_text_link_link_type = pgEnum(
  'enum__pages_v_blocks_text_link_link_type',
  ['pages', 'custom'],
)
export const enum__pages_v_blocks_form_form_type = pgEnum('enum__pages_v_blocks_form_form_type', [
  'download',
  'register',
])
export const enum__pages_v_blocks_home_hero_link_link_type = pgEnum(
  'enum__pages_v_blocks_home_hero_link_link_type',
  ['pages', 'custom'],
)
export const enum__pages_v_blocks_three_steps_link_link_type = pgEnum(
  'enum__pages_v_blocks_three_steps_link_link_type',
  ['pages', 'custom'],
)
export const enum__pages_v_blocks_get_to_know_link_link_type = pgEnum(
  'enum__pages_v_blocks_get_to_know_link_link_type',
  ['pages', 'custom'],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_policy_link_type = pgEnum('enum_footer_policy_link_type', [
  'reference',
  'custom',
])

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_about_us = pgTable(
  'pages_blocks_about_us',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    paragraph: varchar('paragraph'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_about_us_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_about_us_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_about_us_path_idx').on(columns._path),
    pages_blocks_about_us_media_idx: index('pages_blocks_about_us_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_about_us_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_services_services = pgTable(
  'pages_blocks_services_services',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    text: varchar('text'),
    link: varchar('link'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_services_services_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_services_services_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_services.id],
      name: 'pages_blocks_services_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_services = pgTable(
  'pages_blocks_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_services_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_services_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_services_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_team_members = pgTable(
  'pages_blocks_team_members',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    role: varchar('role'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_team_members_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_team_members_parent_id_idx').on(columns._parentID),
    pages_blocks_team_members_media_idx: index('pages_blocks_team_members_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_team.id],
      name: 'pages_blocks_team_members_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_team = pgTable(
  'pages_blocks_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_team_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_team_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_team_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_text = pgTable(
  'pages_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    link_label: varchar('link_label'),
    link_linkType: enum_pages_blocks_text_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_text_path_idx').on(columns._path),
    pages_blocks_text_link_link_page_idx: index('pages_blocks_text_link_link_page_idx').on(
      columns.link_page,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form = pgTable(
  'pages_blocks_form',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    formType: enum_pages_blocks_form_form_type('form_type').default('download'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_text_editor = pgTable(
  'pages_blocks_text_editor',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    content: jsonb('content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_text_editor_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_text_editor_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_text_editor_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_text_editor_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_contact = pgTable(
  'pages_blocks_contact',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    phone: varchar('phone'),
    email: varchar('email'),
    addressTitle: varchar('address_title'),
    address: varchar('address'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_contact_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_contact_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_contact_path_idx').on(columns._path),
    pages_blocks_contact_media_idx: index('pages_blocks_contact_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_contact_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_home_hero_images = pgTable(
  'pages_blocks_home_hero_images',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_home_hero_images_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_home_hero_images_parent_id_idx').on(columns._parentID),
    pages_blocks_home_hero_images_media_idx: index('pages_blocks_home_hero_images_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_home_hero.id],
      name: 'pages_blocks_home_hero_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_home_hero = pgTable(
  'pages_blocks_home_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    link_label: varchar('link_label'),
    link_linkType: enum_pages_blocks_home_hero_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_home_hero_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_home_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_home_hero_path_idx').on(columns._path),
    pages_blocks_home_hero_link_link_page_idx: index(
      'pages_blocks_home_hero_link_link_page_idx',
    ).on(columns.link_page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_home_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_why_block_cards = pgTable(
  'pages_blocks_why_block_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_why_block_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_why_block_cards_parent_id_idx').on(columns._parentID),
    pages_blocks_why_block_cards_media_idx: index('pages_blocks_why_block_cards_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_why_block.id],
      name: 'pages_blocks_why_block_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_why_block = pgTable(
  'pages_blocks_why_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_why_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_why_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_why_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_why_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_adaptation_cards = pgTable(
  'pages_blocks_adaptation_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_adaptation_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_adaptation_cards_parent_id_idx').on(columns._parentID),
    pages_blocks_adaptation_cards_media_idx: index('pages_blocks_adaptation_cards_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_adaptation.id],
      name: 'pages_blocks_adaptation_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_adaptation = pgTable(
  'pages_blocks_adaptation',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle').default(''),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_adaptation_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_adaptation_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_adaptation_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_adaptation_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_three_steps_steps = pgTable(
  'pages_blocks_three_steps_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_three_steps_steps_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_three_steps_steps_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_three_steps.id],
      name: 'pages_blocks_three_steps_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_three_steps = pgTable(
  'pages_blocks_three_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    link_label: varchar('link_label'),
    link_linkType: enum_pages_blocks_three_steps_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_three_steps_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_three_steps_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_three_steps_path_idx').on(columns._path),
    pages_blocks_three_steps_link_link_page_idx: index(
      'pages_blocks_three_steps_link_link_page_idx',
    ).on(columns.link_page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_three_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_get_to_know_cards = pgTable(
  'pages_blocks_get_to_know_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_get_to_know_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_get_to_know_cards_parent_id_idx').on(columns._parentID),
    pages_blocks_get_to_know_cards_media_idx: index('pages_blocks_get_to_know_cards_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_get_to_know.id],
      name: 'pages_blocks_get_to_know_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_get_to_know = pgTable(
  'pages_blocks_get_to_know',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    link_label: varchar('link_label'),
    link_linkType: enum_pages_blocks_get_to_know_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_get_to_know_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_get_to_know_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_get_to_know_path_idx').on(columns._path),
    pages_blocks_get_to_know_link_link_page_idx: index(
      'pages_blocks_get_to_know_link_link_page_idx',
    ).on(columns.link_page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_get_to_know_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_registration_home = pgTable(
  'pages_blocks_registration_home',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_registration_home_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_registration_home_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_registration_home_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_registration_home_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_about_us = pgTable(
  '_pages_v_blocks_about_us',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    paragraph: varchar('paragraph'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_about_us_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_about_us_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_about_us_path_idx').on(columns._path),
    _pages_v_blocks_about_us_media_idx: index('_pages_v_blocks_about_us_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_about_us_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_services_services = pgTable(
  '_pages_v_blocks_services_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    text: varchar('text'),
    link: varchar('link'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_services_services_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_services_services_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_services.id],
      name: '_pages_v_blocks_services_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_services = pgTable(
  '_pages_v_blocks_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_services_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_services_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_services_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_team_members = pgTable(
  '_pages_v_blocks_team_members',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    role: varchar('role'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_team_members_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_team_members_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_team_members_media_idx: index('_pages_v_blocks_team_members_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_team.id],
      name: '_pages_v_blocks_team_members_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_team = pgTable(
  '_pages_v_blocks_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_team_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_team_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_team_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_text = pgTable(
  '_pages_v_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    link_label: varchar('link_label'),
    link_linkType: enum__pages_v_blocks_text_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_text_path_idx').on(columns._path),
    _pages_v_blocks_text_link_link_page_idx: index('_pages_v_blocks_text_link_link_page_idx').on(
      columns.link_page,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form = pgTable(
  '_pages_v_blocks_form',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    formType: enum__pages_v_blocks_form_form_type('form_type').default('download'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_text_editor = pgTable(
  '_pages_v_blocks_text_editor',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_text_editor_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_text_editor_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_text_editor_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_text_editor_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_contact = pgTable(
  '_pages_v_blocks_contact',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    phone: varchar('phone'),
    email: varchar('email'),
    addressTitle: varchar('address_title'),
    address: varchar('address'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_contact_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_contact_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_contact_path_idx').on(columns._path),
    _pages_v_blocks_contact_media_idx: index('_pages_v_blocks_contact_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_contact_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_home_hero_images = pgTable(
  '_pages_v_blocks_home_hero_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_home_hero_images_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_home_hero_images_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_home_hero_images_media_idx: index(
      '_pages_v_blocks_home_hero_images_media_idx',
    ).on(columns.media),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_home_hero.id],
      name: '_pages_v_blocks_home_hero_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_home_hero = pgTable(
  '_pages_v_blocks_home_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    link_label: varchar('link_label'),
    link_linkType: enum__pages_v_blocks_home_hero_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_home_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_home_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_home_hero_path_idx').on(columns._path),
    _pages_v_blocks_home_hero_link_link_page_idx: index(
      '_pages_v_blocks_home_hero_link_link_page_idx',
    ).on(columns.link_page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_home_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_why_block_cards = pgTable(
  '_pages_v_blocks_why_block_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_why_block_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_why_block_cards_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_why_block_cards_media_idx: index(
      '_pages_v_blocks_why_block_cards_media_idx',
    ).on(columns.media),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_why_block.id],
      name: '_pages_v_blocks_why_block_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_why_block = pgTable(
  '_pages_v_blocks_why_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_why_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_why_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_why_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_why_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_adaptation_cards = pgTable(
  '_pages_v_blocks_adaptation_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_adaptation_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_adaptation_cards_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_adaptation_cards_media_idx: index(
      '_pages_v_blocks_adaptation_cards_media_idx',
    ).on(columns.media),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_adaptation.id],
      name: '_pages_v_blocks_adaptation_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_adaptation = pgTable(
  '_pages_v_blocks_adaptation',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle').default(''),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_adaptation_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_adaptation_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_adaptation_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_adaptation_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_three_steps_steps = pgTable(
  '_pages_v_blocks_three_steps_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_three_steps_steps_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_three_steps_steps_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_three_steps.id],
      name: '_pages_v_blocks_three_steps_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_three_steps = pgTable(
  '_pages_v_blocks_three_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    link_label: varchar('link_label'),
    link_linkType:
      enum__pages_v_blocks_three_steps_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_three_steps_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_three_steps_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_three_steps_path_idx').on(columns._path),
    _pages_v_blocks_three_steps_link_link_page_idx: index(
      '_pages_v_blocks_three_steps_link_link_page_idx',
    ).on(columns.link_page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_three_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_get_to_know_cards = pgTable(
  '_pages_v_blocks_get_to_know_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_get_to_know_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_get_to_know_cards_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_get_to_know_cards_media_idx: index(
      '_pages_v_blocks_get_to_know_cards_media_idx',
    ).on(columns.media),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_get_to_know.id],
      name: '_pages_v_blocks_get_to_know_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_get_to_know = pgTable(
  '_pages_v_blocks_get_to_know',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    link_label: varchar('link_label'),
    link_linkType:
      enum__pages_v_blocks_get_to_know_link_link_type('link_link_type').default('pages'),
    link_page: integer('link_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_get_to_know_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_get_to_know_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_get_to_know_path_idx').on(columns._path),
    _pages_v_blocks_get_to_know_link_link_page_idx: index(
      '_pages_v_blocks_get_to_know_link_link_page_idx',
    ).on(columns.link_page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_get_to_know_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_registration_home = pgTable(
  '_pages_v_blocks_registration_home',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_registration_home_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_registration_home_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_registration_home_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_registration_home_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    prefix: varchar('prefix').default('.'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    mediaID: integer('media_id'),
    usersID: integer('users_id'),
    redirectsID: integer('redirects_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_button: boolean('link_button'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable(
  'header',
  {
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    header_media_idx: index('header_media_idx').on(columns.media),
  }),
)

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_button: boolean('link_button'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_policy = pgTable(
  'footer_policy',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_policy_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_button: boolean('link_button'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_policy_order_idx').on(columns._order),
    _parentIDIdx: index('footer_policy_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_policy_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable(
  'footer',
  {
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    copyright: varchar('copyright').notNull(),
    phone: varchar('phone').notNull(),
    email: varchar('email').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    footer_media_idx: index('footer_media_idx').on(columns.media),
  }),
)

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_about_us = relations(pages_blocks_about_us, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_about_us._parentID],
    references: [pages.id],
    relationName: '_blocks_aboutUs',
  }),
  media: one(media, {
    fields: [pages_blocks_about_us.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_pages_blocks_services_services = relations(
  pages_blocks_services_services,
  ({ one }) => ({
    _parentID: one(pages_blocks_services, {
      fields: [pages_blocks_services_services._parentID],
      references: [pages_blocks_services.id],
      relationName: 'services',
    }),
  }),
)
export const relations_pages_blocks_services = relations(
  pages_blocks_services,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_services._parentID],
      references: [pages.id],
      relationName: '_blocks_services',
    }),
    services: many(pages_blocks_services_services, {
      relationName: 'services',
    }),
  }),
)
export const relations_pages_blocks_team_members = relations(
  pages_blocks_team_members,
  ({ one }) => ({
    _parentID: one(pages_blocks_team, {
      fields: [pages_blocks_team_members._parentID],
      references: [pages_blocks_team.id],
      relationName: 'members',
    }),
    media: one(media, {
      fields: [pages_blocks_team_members.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_team = relations(pages_blocks_team, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_team._parentID],
    references: [pages.id],
    relationName: '_blocks_team',
  }),
  members: many(pages_blocks_team_members, {
    relationName: 'members',
  }),
}))
export const relations_pages_blocks_text = relations(pages_blocks_text, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_text._parentID],
    references: [pages.id],
    relationName: '_blocks_text',
  }),
  link_page: one(pages, {
    fields: [pages_blocks_text.link_page],
    references: [pages.id],
    relationName: 'link_page',
  }),
}))
export const relations_pages_blocks_form = relations(pages_blocks_form, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form._parentID],
    references: [pages.id],
    relationName: '_blocks_form',
  }),
}))
export const relations_pages_blocks_text_editor = relations(
  pages_blocks_text_editor,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_text_editor._parentID],
      references: [pages.id],
      relationName: '_blocks_textEditor',
    }),
  }),
)
export const relations_pages_blocks_contact = relations(pages_blocks_contact, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_contact._parentID],
    references: [pages.id],
    relationName: '_blocks_contact',
  }),
  media: one(media, {
    fields: [pages_blocks_contact.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_pages_blocks_home_hero_images = relations(
  pages_blocks_home_hero_images,
  ({ one }) => ({
    _parentID: one(pages_blocks_home_hero, {
      fields: [pages_blocks_home_hero_images._parentID],
      references: [pages_blocks_home_hero.id],
      relationName: 'images',
    }),
    media: one(media, {
      fields: [pages_blocks_home_hero_images.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_home_hero = relations(
  pages_blocks_home_hero,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_home_hero._parentID],
      references: [pages.id],
      relationName: '_blocks_homeHero',
    }),
    link_page: one(pages, {
      fields: [pages_blocks_home_hero.link_page],
      references: [pages.id],
      relationName: 'link_page',
    }),
    images: many(pages_blocks_home_hero_images, {
      relationName: 'images',
    }),
  }),
)
export const relations_pages_blocks_why_block_cards = relations(
  pages_blocks_why_block_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_why_block, {
      fields: [pages_blocks_why_block_cards._parentID],
      references: [pages_blocks_why_block.id],
      relationName: 'cards',
    }),
    media: one(media, {
      fields: [pages_blocks_why_block_cards.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_why_block = relations(
  pages_blocks_why_block,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_why_block._parentID],
      references: [pages.id],
      relationName: '_blocks_whyBlock',
    }),
    cards: many(pages_blocks_why_block_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_adaptation_cards = relations(
  pages_blocks_adaptation_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_adaptation, {
      fields: [pages_blocks_adaptation_cards._parentID],
      references: [pages_blocks_adaptation.id],
      relationName: 'cards',
    }),
    media: one(media, {
      fields: [pages_blocks_adaptation_cards.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_adaptation = relations(
  pages_blocks_adaptation,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_adaptation._parentID],
      references: [pages.id],
      relationName: '_blocks_adaptation',
    }),
    cards: many(pages_blocks_adaptation_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_three_steps_steps = relations(
  pages_blocks_three_steps_steps,
  ({ one }) => ({
    _parentID: one(pages_blocks_three_steps, {
      fields: [pages_blocks_three_steps_steps._parentID],
      references: [pages_blocks_three_steps.id],
      relationName: 'steps',
    }),
  }),
)
export const relations_pages_blocks_three_steps = relations(
  pages_blocks_three_steps,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_three_steps._parentID],
      references: [pages.id],
      relationName: '_blocks_threeSteps',
    }),
    steps: many(pages_blocks_three_steps_steps, {
      relationName: 'steps',
    }),
    link_page: one(pages, {
      fields: [pages_blocks_three_steps.link_page],
      references: [pages.id],
      relationName: 'link_page',
    }),
  }),
)
export const relations_pages_blocks_get_to_know_cards = relations(
  pages_blocks_get_to_know_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_get_to_know, {
      fields: [pages_blocks_get_to_know_cards._parentID],
      references: [pages_blocks_get_to_know.id],
      relationName: 'cards',
    }),
    media: one(media, {
      fields: [pages_blocks_get_to_know_cards.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_get_to_know = relations(
  pages_blocks_get_to_know,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_get_to_know._parentID],
      references: [pages.id],
      relationName: '_blocks_getToKnow',
    }),
    cards: many(pages_blocks_get_to_know_cards, {
      relationName: 'cards',
    }),
    link_page: one(pages, {
      fields: [pages_blocks_get_to_know.link_page],
      references: [pages.id],
      relationName: 'link_page',
    }),
  }),
)
export const relations_pages_blocks_registration_home = relations(
  pages_blocks_registration_home,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_registration_home._parentID],
      references: [pages.id],
      relationName: '_blocks_registrationHome',
    }),
  }),
)
export const relations_pages = relations(pages, ({ one, many }) => ({
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_aboutUs: many(pages_blocks_about_us, {
    relationName: '_blocks_aboutUs',
  }),
  _blocks_services: many(pages_blocks_services, {
    relationName: '_blocks_services',
  }),
  _blocks_team: many(pages_blocks_team, {
    relationName: '_blocks_team',
  }),
  _blocks_text: many(pages_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_form: many(pages_blocks_form, {
    relationName: '_blocks_form',
  }),
  _blocks_textEditor: many(pages_blocks_text_editor, {
    relationName: '_blocks_textEditor',
  }),
  _blocks_contact: many(pages_blocks_contact, {
    relationName: '_blocks_contact',
  }),
  _blocks_homeHero: many(pages_blocks_home_hero, {
    relationName: '_blocks_homeHero',
  }),
  _blocks_whyBlock: many(pages_blocks_why_block, {
    relationName: '_blocks_whyBlock',
  }),
  _blocks_adaptation: many(pages_blocks_adaptation, {
    relationName: '_blocks_adaptation',
  }),
  _blocks_threeSteps: many(pages_blocks_three_steps, {
    relationName: '_blocks_threeSteps',
  }),
  _blocks_getToKnow: many(pages_blocks_get_to_know, {
    relationName: '_blocks_getToKnow',
  }),
  _blocks_registrationHome: many(pages_blocks_registration_home, {
    relationName: '_blocks_registrationHome',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_about_us = relations(
  _pages_v_blocks_about_us,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_about_us._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_aboutUs',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_about_us.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_services_services = relations(
  _pages_v_blocks_services_services,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_services, {
      fields: [_pages_v_blocks_services_services._parentID],
      references: [_pages_v_blocks_services.id],
      relationName: 'services',
    }),
  }),
)
export const relations__pages_v_blocks_services = relations(
  _pages_v_blocks_services,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_services._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_services',
    }),
    services: many(_pages_v_blocks_services_services, {
      relationName: 'services',
    }),
  }),
)
export const relations__pages_v_blocks_team_members = relations(
  _pages_v_blocks_team_members,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_team, {
      fields: [_pages_v_blocks_team_members._parentID],
      references: [_pages_v_blocks_team.id],
      relationName: 'members',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_team_members.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_team = relations(_pages_v_blocks_team, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_team._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_team',
  }),
  members: many(_pages_v_blocks_team_members, {
    relationName: 'members',
  }),
}))
export const relations__pages_v_blocks_text = relations(_pages_v_blocks_text, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_text._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_text',
  }),
  link_page: one(pages, {
    fields: [_pages_v_blocks_text.link_page],
    references: [pages.id],
    relationName: 'link_page',
  }),
}))
export const relations__pages_v_blocks_form = relations(_pages_v_blocks_form, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_form._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_form',
  }),
}))
export const relations__pages_v_blocks_text_editor = relations(
  _pages_v_blocks_text_editor,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_text_editor._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_textEditor',
    }),
  }),
)
export const relations__pages_v_blocks_contact = relations(_pages_v_blocks_contact, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_contact._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_contact',
  }),
  media: one(media, {
    fields: [_pages_v_blocks_contact.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations__pages_v_blocks_home_hero_images = relations(
  _pages_v_blocks_home_hero_images,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_home_hero, {
      fields: [_pages_v_blocks_home_hero_images._parentID],
      references: [_pages_v_blocks_home_hero.id],
      relationName: 'images',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_home_hero_images.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_home_hero = relations(
  _pages_v_blocks_home_hero,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_home_hero._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_homeHero',
    }),
    link_page: one(pages, {
      fields: [_pages_v_blocks_home_hero.link_page],
      references: [pages.id],
      relationName: 'link_page',
    }),
    images: many(_pages_v_blocks_home_hero_images, {
      relationName: 'images',
    }),
  }),
)
export const relations__pages_v_blocks_why_block_cards = relations(
  _pages_v_blocks_why_block_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_why_block, {
      fields: [_pages_v_blocks_why_block_cards._parentID],
      references: [_pages_v_blocks_why_block.id],
      relationName: 'cards',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_why_block_cards.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_why_block = relations(
  _pages_v_blocks_why_block,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_why_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_whyBlock',
    }),
    cards: many(_pages_v_blocks_why_block_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_adaptation_cards = relations(
  _pages_v_blocks_adaptation_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_adaptation, {
      fields: [_pages_v_blocks_adaptation_cards._parentID],
      references: [_pages_v_blocks_adaptation.id],
      relationName: 'cards',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_adaptation_cards.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_adaptation = relations(
  _pages_v_blocks_adaptation,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_adaptation._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_adaptation',
    }),
    cards: many(_pages_v_blocks_adaptation_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_three_steps_steps = relations(
  _pages_v_blocks_three_steps_steps,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_three_steps, {
      fields: [_pages_v_blocks_three_steps_steps._parentID],
      references: [_pages_v_blocks_three_steps.id],
      relationName: 'steps',
    }),
  }),
)
export const relations__pages_v_blocks_three_steps = relations(
  _pages_v_blocks_three_steps,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_three_steps._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_threeSteps',
    }),
    steps: many(_pages_v_blocks_three_steps_steps, {
      relationName: 'steps',
    }),
    link_page: one(pages, {
      fields: [_pages_v_blocks_three_steps.link_page],
      references: [pages.id],
      relationName: 'link_page',
    }),
  }),
)
export const relations__pages_v_blocks_get_to_know_cards = relations(
  _pages_v_blocks_get_to_know_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_get_to_know, {
      fields: [_pages_v_blocks_get_to_know_cards._parentID],
      references: [_pages_v_blocks_get_to_know.id],
      relationName: 'cards',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_get_to_know_cards.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_get_to_know = relations(
  _pages_v_blocks_get_to_know,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_get_to_know._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_getToKnow',
    }),
    cards: many(_pages_v_blocks_get_to_know_cards, {
      relationName: 'cards',
    }),
    link_page: one(pages, {
      fields: [_pages_v_blocks_get_to_know.link_page],
      references: [pages.id],
      relationName: 'link_page',
    }),
  }),
)
export const relations__pages_v_blocks_registration_home = relations(
  _pages_v_blocks_registration_home,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_registration_home._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_registrationHome',
    }),
  }),
)
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_aboutUs: many(_pages_v_blocks_about_us, {
    relationName: '_blocks_aboutUs',
  }),
  _blocks_services: many(_pages_v_blocks_services, {
    relationName: '_blocks_services',
  }),
  _blocks_team: many(_pages_v_blocks_team, {
    relationName: '_blocks_team',
  }),
  _blocks_text: many(_pages_v_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_form: many(_pages_v_blocks_form, {
    relationName: '_blocks_form',
  }),
  _blocks_textEditor: many(_pages_v_blocks_text_editor, {
    relationName: '_blocks_textEditor',
  }),
  _blocks_contact: many(_pages_v_blocks_contact, {
    relationName: '_blocks_contact',
  }),
  _blocks_homeHero: many(_pages_v_blocks_home_hero, {
    relationName: '_blocks_homeHero',
  }),
  _blocks_whyBlock: many(_pages_v_blocks_why_block, {
    relationName: '_blocks_whyBlock',
  }),
  _blocks_adaptation: many(_pages_v_blocks_adaptation, {
    relationName: '_blocks_adaptation',
  }),
  _blocks_threeSteps: many(_pages_v_blocks_three_steps, {
    relationName: '_blocks_threeSteps',
  }),
  _blocks_getToKnow: many(_pages_v_blocks_get_to_know, {
    relationName: '_blocks_getToKnow',
  }),
  _blocks_registrationHome: many(_pages_v_blocks_registration_home, {
    relationName: '_blocks_registrationHome',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_header = relations(header, ({ one, many }) => ({
  media: one(media, {
    fields: [header.media],
    references: [media.id],
    relationName: 'media',
  }),
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_policy = relations(footer_policy, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_policy._parentID],
    references: [footer.id],
    relationName: 'policy',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_footer = relations(footer, ({ one, many }) => ({
  media: one(media, {
    fields: [footer.media],
    references: [media.id],
    relationName: 'media',
  }),
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  policy: many(footer_policy, {
    relationName: 'policy',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum_pages_blocks_text_link_link_type: typeof enum_pages_blocks_text_link_link_type
  enum_pages_blocks_form_form_type: typeof enum_pages_blocks_form_form_type
  enum_pages_blocks_home_hero_link_link_type: typeof enum_pages_blocks_home_hero_link_link_type
  enum_pages_blocks_three_steps_link_link_type: typeof enum_pages_blocks_three_steps_link_link_type
  enum_pages_blocks_get_to_know_link_link_type: typeof enum_pages_blocks_get_to_know_link_link_type
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_blocks_text_link_link_type: typeof enum__pages_v_blocks_text_link_link_type
  enum__pages_v_blocks_form_form_type: typeof enum__pages_v_blocks_form_form_type
  enum__pages_v_blocks_home_hero_link_link_type: typeof enum__pages_v_blocks_home_hero_link_link_type
  enum__pages_v_blocks_three_steps_link_link_type: typeof enum__pages_v_blocks_three_steps_link_link_type
  enum__pages_v_blocks_get_to_know_link_link_type: typeof enum__pages_v_blocks_get_to_know_link_link_type
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  enum_footer_policy_link_type: typeof enum_footer_policy_link_type
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_about_us: typeof pages_blocks_about_us
  pages_blocks_services_services: typeof pages_blocks_services_services
  pages_blocks_services: typeof pages_blocks_services
  pages_blocks_team_members: typeof pages_blocks_team_members
  pages_blocks_team: typeof pages_blocks_team
  pages_blocks_text: typeof pages_blocks_text
  pages_blocks_form: typeof pages_blocks_form
  pages_blocks_text_editor: typeof pages_blocks_text_editor
  pages_blocks_contact: typeof pages_blocks_contact
  pages_blocks_home_hero_images: typeof pages_blocks_home_hero_images
  pages_blocks_home_hero: typeof pages_blocks_home_hero
  pages_blocks_why_block_cards: typeof pages_blocks_why_block_cards
  pages_blocks_why_block: typeof pages_blocks_why_block
  pages_blocks_adaptation_cards: typeof pages_blocks_adaptation_cards
  pages_blocks_adaptation: typeof pages_blocks_adaptation
  pages_blocks_three_steps_steps: typeof pages_blocks_three_steps_steps
  pages_blocks_three_steps: typeof pages_blocks_three_steps
  pages_blocks_get_to_know_cards: typeof pages_blocks_get_to_know_cards
  pages_blocks_get_to_know: typeof pages_blocks_get_to_know
  pages_blocks_registration_home: typeof pages_blocks_registration_home
  pages: typeof pages
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_about_us: typeof _pages_v_blocks_about_us
  _pages_v_blocks_services_services: typeof _pages_v_blocks_services_services
  _pages_v_blocks_services: typeof _pages_v_blocks_services
  _pages_v_blocks_team_members: typeof _pages_v_blocks_team_members
  _pages_v_blocks_team: typeof _pages_v_blocks_team
  _pages_v_blocks_text: typeof _pages_v_blocks_text
  _pages_v_blocks_form: typeof _pages_v_blocks_form
  _pages_v_blocks_text_editor: typeof _pages_v_blocks_text_editor
  _pages_v_blocks_contact: typeof _pages_v_blocks_contact
  _pages_v_blocks_home_hero_images: typeof _pages_v_blocks_home_hero_images
  _pages_v_blocks_home_hero: typeof _pages_v_blocks_home_hero
  _pages_v_blocks_why_block_cards: typeof _pages_v_blocks_why_block_cards
  _pages_v_blocks_why_block: typeof _pages_v_blocks_why_block
  _pages_v_blocks_adaptation_cards: typeof _pages_v_blocks_adaptation_cards
  _pages_v_blocks_adaptation: typeof _pages_v_blocks_adaptation
  _pages_v_blocks_three_steps_steps: typeof _pages_v_blocks_three_steps_steps
  _pages_v_blocks_three_steps: typeof _pages_v_blocks_three_steps
  _pages_v_blocks_get_to_know_cards: typeof _pages_v_blocks_get_to_know_cards
  _pages_v_blocks_get_to_know: typeof _pages_v_blocks_get_to_know
  _pages_v_blocks_registration_home: typeof _pages_v_blocks_registration_home
  _pages_v: typeof _pages_v
  media: typeof media
  users_sessions: typeof users_sessions
  users: typeof users
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer_policy: typeof footer_policy
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_about_us: typeof relations_pages_blocks_about_us
  relations_pages_blocks_services_services: typeof relations_pages_blocks_services_services
  relations_pages_blocks_services: typeof relations_pages_blocks_services
  relations_pages_blocks_team_members: typeof relations_pages_blocks_team_members
  relations_pages_blocks_team: typeof relations_pages_blocks_team
  relations_pages_blocks_text: typeof relations_pages_blocks_text
  relations_pages_blocks_form: typeof relations_pages_blocks_form
  relations_pages_blocks_text_editor: typeof relations_pages_blocks_text_editor
  relations_pages_blocks_contact: typeof relations_pages_blocks_contact
  relations_pages_blocks_home_hero_images: typeof relations_pages_blocks_home_hero_images
  relations_pages_blocks_home_hero: typeof relations_pages_blocks_home_hero
  relations_pages_blocks_why_block_cards: typeof relations_pages_blocks_why_block_cards
  relations_pages_blocks_why_block: typeof relations_pages_blocks_why_block
  relations_pages_blocks_adaptation_cards: typeof relations_pages_blocks_adaptation_cards
  relations_pages_blocks_adaptation: typeof relations_pages_blocks_adaptation
  relations_pages_blocks_three_steps_steps: typeof relations_pages_blocks_three_steps_steps
  relations_pages_blocks_three_steps: typeof relations_pages_blocks_three_steps
  relations_pages_blocks_get_to_know_cards: typeof relations_pages_blocks_get_to_know_cards
  relations_pages_blocks_get_to_know: typeof relations_pages_blocks_get_to_know
  relations_pages_blocks_registration_home: typeof relations_pages_blocks_registration_home
  relations_pages: typeof relations_pages
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_about_us: typeof relations__pages_v_blocks_about_us
  relations__pages_v_blocks_services_services: typeof relations__pages_v_blocks_services_services
  relations__pages_v_blocks_services: typeof relations__pages_v_blocks_services
  relations__pages_v_blocks_team_members: typeof relations__pages_v_blocks_team_members
  relations__pages_v_blocks_team: typeof relations__pages_v_blocks_team
  relations__pages_v_blocks_text: typeof relations__pages_v_blocks_text
  relations__pages_v_blocks_form: typeof relations__pages_v_blocks_form
  relations__pages_v_blocks_text_editor: typeof relations__pages_v_blocks_text_editor
  relations__pages_v_blocks_contact: typeof relations__pages_v_blocks_contact
  relations__pages_v_blocks_home_hero_images: typeof relations__pages_v_blocks_home_hero_images
  relations__pages_v_blocks_home_hero: typeof relations__pages_v_blocks_home_hero
  relations__pages_v_blocks_why_block_cards: typeof relations__pages_v_blocks_why_block_cards
  relations__pages_v_blocks_why_block: typeof relations__pages_v_blocks_why_block
  relations__pages_v_blocks_adaptation_cards: typeof relations__pages_v_blocks_adaptation_cards
  relations__pages_v_blocks_adaptation: typeof relations__pages_v_blocks_adaptation
  relations__pages_v_blocks_three_steps_steps: typeof relations__pages_v_blocks_three_steps_steps
  relations__pages_v_blocks_three_steps: typeof relations__pages_v_blocks_three_steps
  relations__pages_v_blocks_get_to_know_cards: typeof relations__pages_v_blocks_get_to_know_cards
  relations__pages_v_blocks_get_to_know: typeof relations__pages_v_blocks_get_to_know
  relations__pages_v_blocks_registration_home: typeof relations__pages_v_blocks_registration_home
  relations__pages_v: typeof relations__pages_v
  relations_media: typeof relations_media
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_policy: typeof relations_footer_policy
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
